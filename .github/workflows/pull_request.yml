# This workflow will triage pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: PR
on:
 pull_request_target:
   types: [opened, synchronize, reopened, ready_for_review]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/labeler@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
    # - name: Checkout code
    #   uses: actions/checkout@v2
    #   with:
    #     repository: ${{ github.event.pull_request.head.repo.full_name }}
    #     ref: ${{ github.event.pull_request.head.sha }}
    #     clean: false
    #     fetch-depth: '0'
    - name: Get diff files
      id: files
      env:
        OP_TEST_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
        OPRT_REPO: "${{ github.event.pull_request.head.repo.full_name }}" 
        OPRT_SHA: "${{ github.event.pull_request.head.sha }}" 
        OPRT_SRC_BRANCH: "support/action-01"
      run: |
        bash <(curl -sL https://raw.githubusercontent.com/operator-framework/operator-test-playbooks/support/script_pull_target2/upstream/test/oprt_diff.sh)
        OP_TEST_LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
        OP_TEST_MODIFIED_FILES="${{ steps.files.outputs.added_modified }}"
        OP_TEST_RENAMED_FILES="${{ steps.files.outputs.renamed }}"
        OP_TEST_REMOVED_FILES="${{ steps.files.outputs.removed }}"
        echo "OP_TEST_MODIFIED_FILES=$OP_TEST_MODIFIED_FILES"


    # - uses: mshick/add-pr-comment@v1
    #   with:
    #     message: |
    #       Simple PR
    #     repo-token: ${{ secrets.GITHUB_TOKEN }}
    #     repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
    #     allow-repeats: true # This is the default
    - name: Operator test
      id: op-traffic-light
      env:
        OP_TEST_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
        OP_TEST_MODIFIED_FILES: "${{ steps.files.outputs.added_modified }}"
        OP_TEST_RENAMED_FILES: "${{ steps.files.outputs.renamed }}"
        OP_TEST_REMOVED_FILES: "${{ steps.files.outputs.removed }}"
      run: |
        echo "global labels $OP_TEST_LABELS"
        
        bash <(curl -sL https://raw.githubusercontent.com/operator-framework/community-operators/master/scripts/ci/actions-env)
        echo "We have to use script from operator-framework/operator-test-playbooks "
        echo "::set-output name=op_pr_ok::1"
    - name: op-cosmetics-change
      id: op-cosmetics-change
      if: steps.op-traffic-light.outputs.op_pr_ok == '1'
      env:
        OP_TEST_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
      run: |
        echo "global labels $OP_TEST_LABELS"
        echo "We have to use script from operator-framework/operator-test-playbooks "
        echo "::set-output name=op_cosmetics_ok::0"

    # - uses: actions/github-script@v3
    #   # if: steps.op-traffic-light.outputs.op_cosmetics_ok == '1'
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       github.issues.update({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         title: '[WIP] pr in development',
    #       })

    # - uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       github.issues.addLabels({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         labels: ['do-not-merge/work-in-progress', 'needs-ok-to-test' ]
    #       })
    # - uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       // Get a list of all issues created by the PR opener
    #       // See: https://octokit.github.io/rest.js/#pagination
    #       const creator = context.payload.sender.login
    #       const opts = github.issues.listForRepo.endpoint.merge({
    #         ...context.issue,
    #         creator,
    #         state: 'all'
    #       })
    #       const issues = await github.paginate(opts)

    #       for (const issue of issues) {
    #         if (issue.number === context.issue.number) {
    #           continue
    #         }
    #         if (issue.pull_request) {
    #           return // Creator is already a contributor.
    #         }
    #       }

    #       await github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: 'Welcome, new contributor!'
    #       })
    # - name: View context attributes
    #   uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: console.log(github.issues)

    # - uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       github.issues.removeLabel({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         name: 'needs-ok-to-test'
    #       })

    # - uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       github.issues.addLabels({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         labels: ['ok-to-test' ]
    #       })
    # outputs:
    #       op_cosmetics-ok: "${{ steps.op-traffic-light.outputs.op_cosmetics-ok }}"
